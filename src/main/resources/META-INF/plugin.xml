<!--
  ~ Copyright 2020 Nazmul Idris. All rights reserved.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<idea-plugin>
  <!-- Namespace of this plugin. Used in extensions and extension points. -->
  <id>com.developerlife.example.idea-plugin-example</id>
  <name>developerlife example</name>
  <vendor email="idris@developerlife.com" url="http://developerlife.com">
    developerlife.com
  </vendor>

  <description><![CDATA[
    This sample plugin does the following things:
    <ol>
      <li>Creates an application component named extensionPoints.Configurator</li>
      <li>Provides an extension point named "configuratorRunnable"</li>
      <li>Loads all the extensions for this extension point</li>
      <li>Works with VFS</li>
      <li>Works with PSI</li>
      <li>Works with PostStartupActivity</li>
      <li>Works with light services</li>
    </ol>
    ]]></description>

  <!-- Add application component. -->
  <application-components>
    <component>
      <implementation-class>extensionPoints.ConfiguratorComponent
      </implementation-class>
    </component>
  </application-components>

  <!-- Extension point for the application component above. -->
  <extensionPoints>
    <extensionPoint name="configuratorRunnable"
        interface="java.lang.Runnable" />
  </extensionPoints>

  <!-- Extensions that run when the application component above is
  initialized. -->
  <extensions
      defaultExtensionNs="com.developerlife.example.idea-plugin-example">
    <configuratorRunnable order="first"
        implementation="extensions.AnInitializer"
        id="MyPlugin.extensions.AnInitializer" />
    <configuratorRunnable order="last"
        implementation="extensions.AnotherInitializer"
        id="MyPlugin.extensions.AnotherInitializer" />
  </extensions>

  <!-- Extension to publish the LogService. -->
  <extensions defaultExtensionNs="com.intellij">
    <applicationService serviceImplementation="services.LogService" />
  </extensions>

  <!-- Add SearchOnStackOverflowAction to both the EditorPopupMenu and
  ConsoleEditorPopupMenu -->
  <actions>
    <action id="MyPlugin.Editor.actions.SearchOnStackOverflowAction"
        class="actions.SearchOnStackOverflowAction"
        text="Search on Stack Overflow"
        description="Search selected text on Stack Overflow"
        icon="/icons/ic_stackoverflow.svg">
      <add-to-group group-id="EditorPopupMenu" anchor="last" />
      <add-to-group group-id="ConsoleEditorPopupMenu" anchor="last" />
    </action>
  </actions>

  <!-- Create a new Greeting menu and add the following to it: HelloAction and
  AskQuestionOnStackOverflowAction. -->
  <actions>
    <!-- Create a new Greeting menu -->
    <group id="MyPlugin.SampleMenu" text="Greeting" description="Greeting menu">
      <add-to-group group-id="MainMenu" anchor="last" />

      <!-- Add HelloAction to the Greeting menu -->
      <action id="MyPlugin.actions.HelloAction" class="actions.HelloAction"
          text="Hello" description="Says hello"
          icon="/icons/ic_check_circle.svg">
        <add-to-group group-id="MainMenu" anchor="first" />
      </action>

      <!-- Add AskQuestionOnStackOverflowAction to the Greeting menu -->
      <action id="MyPlugin.actions.AskQuestionOnStackOverflowAction"
          class="actions.AskQuestionOnStackOverflowAction" text="Ask Question"
          description="Opens a browser" icon="/icons/ic_stackoverflow.svg">
        <add-to-group group-id="MainMenu" anchor="last" />
      </action>
    </group>
  </actions>

  <!-- Add action to replace the selected text w/ something else -->
  <actions>
    <action id="MyPlugin.EditorReplaceText"
        class="actions.EditorReplaceTextAction" text="Replace Selected Text"
        description="Simply replace selected text w/ something else"
        icon="/icons/ic_extension.svg">
      <add-to-group group-id="EditorPopupMenu" anchor="first" />
    </action>
  </actions>

  <!-- Add action to show caret information in a dialog box -->
  <actions>
    <action id="MyPlugin.EditorShowCaretInfo"
        class="actions.EditorShowCaretInfo" text="Show Caret Info"
        description="Show caret info in a dialog box"
        icon="/icons/ic_extension.svg">
      <keyboard-shortcut first-keystroke="ctrl alt c" keymap="$default" />
      <add-to-group group-id="EditorPopupMenu" anchor="first" />
    </action>
  </actions>

  <!-- Add action to show PSI information in a dialog box  -->
  <actions>
    <action id="MyPlugin.EditorShowPSIInfo" class="actions.EditorShowPSIInfo"
        text="Show PSI Info" description="Show PSI info in a dialog box"
        icon="/icons/ic_extension.svg">
      <add-to-group group-id="EditorPopupMenu" anchor="first" />
    </action>
  </actions>

  <!--  Extension to run some code post startup https://tinyurl.com/ufd64mk -->
  <extensions defaultExtensionNs="com.intellij">
    <postStartupActivity implementation="onProjectOpen.PostStartupActivity" />
  </extensions>

  <!--
    Extension to publish the LogService. This should not be needed with light
    services, but due to the tests failing on the latest versions of IDEA, the
    "light service" has to be manually registered for now.
  -->
  <extensions defaultExtensionNs="com.intellij">
    <projectService
        serviceImplementation="onProjectOpen.FileManagerLightService" />
  </extensions>

</idea-plugin>